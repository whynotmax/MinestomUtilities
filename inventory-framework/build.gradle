import java.text.SimpleDateFormat

plugins {
    id "application"
    id "com.github.johnrengelman.shadow" version "${shadowVersion}"
    id "net.kyori.blossom" version "${blossomVersion}"
}

compileJava {
    targetCompatibility = JavaVersion.VERSION_17
    sourceCompatibility = JavaVersion.VERSION_17
}

mainClassName = "dev.mzcy.inventories.InventoryFramework"

dependencies {
    compileOnly "net.minestom:minestom-snapshots:${minestomVersion}"

    compileOnly "org.jetbrains:annotations:${annotationsVersion}"
    compileOnly "org.yaml:snakeyaml:${snakeYamlVersion}"

    implementation "org.tinylog:slf4j-tinylog:${tinylogVersion}"
    implementation "org.tinylog:tinylog-impl:${tinylogVersion}"
    implementation "org.reflections:reflections:${reflectionsVersion}"

    implementation project(":utilities")

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


    testImplementation "net.minestom:minestom-snapshots:${minestomVersion}"
    testImplementation project(":utilities")
    testImplementation 'org.mockito:mockito-core:3.12.4' // replace with the version you are using
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4' // replace with the version you are using
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' // replace with the version you are using
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' // replace with the version you are using
}

shadowJar {
    manifest {
        attributes(
                "Main-Class": mainClassName,
                "Implementation-Title": rootProject.name,
                "Implementation-Version": rootProject.version,
                "Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Created-By": "Gradle ${gradle.gradleVersion}",
                "Build-Jdk": "${System.properties["java.version"]} (${System.properties["java.vendor"]} ${System.properties["java.vm.version"]})",
                "Build-OS": "${System.properties["os.name"]} ${System.properties["os.arch"]} ${System.properties["os.version"]}"
        )
    }
}

compileJava {
    options.encoding = "UTF-8"
}

blossom {
    replaceToken "PROJECT_NAME", rootProject.name
    replaceToken "PROJECT_VERSION", rootProject.version
    replaceToken "DEP_MINESTOM_VERSION", "${minestomVersion}"
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}